/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Sphere, Trail } from "@react-three/drei";
import { useGameStore } from "../../stores/gameStore";
import { useEffect, useRef } from "react";
import * as THREE from "three";
import { RigidBody, RapierRigidBody } from "@react-three/rapier";
import { useFrame } from "@react-three/fiber";

export function Fireball() {
  const gameStore = useGameStore();
  const { attack } = gameStore;

  const fireBallRef = useRef<RapierRigidBody>(null);
  const speed = 50; // Speed of the fireball

  // Initialize the fireball position when attack is triggered
  useEffect(() => {
    if (!attack || !fireBallRef.current) return;

    // Set the initial position of the fireball
    fireBallRef.current.setTranslation(
      { x: attack.initial.x, y: attack.initial.y, z: attack.initial.z },
      true
    );

    // Reset velocity when spawning
    fireBallRef.current.setLinvel({ x: 0, y: 0, z: 0 }, true);
  }, [attack]);

  // Move the fireball toward the target
  useFrame(() => {
    if (!attack || !fireBallRef.current) return;

    // Get current position
    const position = fireBallRef.current.translation();

    // Calculate direction vector from current position to target
    const direction = new THREE.Vector3(
      attack.target.x - position.x,
      attack.target.y - position.y,
      attack.target.z - position.z
    ).normalize();

    // Apply velocity in the direction of the target
    fireBallRef.current.setLinvel(
      {
        x: direction.x * speed,
        y: direction.y * speed,
        z: direction.z * speed,
      },
      true
    );
  });

  // Don't render anything if there's no attack
  if (!attack) return null;

  return (
    <RigidBody
      ref={fireBallRef}
      type="dynamic"
      colliders="ball"
      gravityScale={0}
      position={[attack.initial.x, attack.initial.y, attack.initial.z]}
      onCollisionEnter={() => {
        // Optional: Handle collision effects here
        // For example, you could set attack to null to remove the fireball
        // gameStore.setAttack(null);
      }}
    >
      <Trail
        width={1}
        color={"#ff2d00"}
        length={4}
        decay={1}
        attenuation={(width) => width}
      >
        <Sphere args={[0.3, 16, 16]}>
          <meshStandardMaterial
            color="#ff5500"
            emissive="#ff2200"
            emissiveIntensity={2}
            toneMapped={false}
          />
        </Sphere>
      </Trail>
    </RigidBody>
  );
}
